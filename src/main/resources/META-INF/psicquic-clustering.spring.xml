<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:batch="http://www.springframework.org/schema/batch"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                           http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
                           http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-2.1.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">

    <context:component-scan base-package="org.hupo.psi.mi.psicquic.clustering"/>
    <context:annotation-config/>

    <bean id="autowired" class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor" />
    <bean id="required" class="org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor" />


    <!-- In Memory storage for spring batch -->

    <!--<bean id="jobRepository" class="org.springframework.batch.core.repository.support.SimpleJobRepository">-->
    <!--<constructor-arg>-->
    <!--<bean class="org.springframework.batch.core.repository.dao.MapJobInstanceDao"/>-->
    <!--</constructor-arg>-->
    <!--<constructor-arg>-->
    <!--<bean class="org.springframework.batch.core.repository.dao.MapJobExecutionDao" />-->
    <!--</constructor-arg>-->
    <!--<constructor-arg>-->
    <!--<bean class="org.springframework.batch.core.repository.dao.MapStepExecutionDao"/>-->
    <!--</constructor-arg>-->
    <!--<constructor-arg>-->
    <!--<bean class="org.springframework.batch.core.repository.dao.MapExecutionContextDao"/>-->
    <!--</constructor-arg>-->
    <!--</bean>-->

    <!--<bean id="jobLauncher" class="org.springframework.batch.core.launch.support.SimpleJobLauncher">-->
    <!--<property name="jobRepository" ref="jobRepository"/>-->
    <!--</bean>-->

    <!-- RDBMS storage for spring batch -->

    <!--<bean id="springBatchDataSource" class="org.apache.commons.dbcp.BasicDataSource">-->
    <!--<property name="driverClassName" value="${batch.jdbc.driver}"/>-->
    <!--<property name="url" value="${batch.jdbc.url}"/>-->
    <!--<property name="username" value="${batch.jdbc.user}"/>-->
    <!--<property name="password" value="${batch.jdbc.password}"/>-->
    <!--</bean>-->

    <!-- Batch framework -->

    <bean id="clusteringTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
          lazy-init="true">
        <property name="dataSource" ref="clusteringDataSource"/>
    </bean>

    <batch:job-repository id="jobRepository" data-source="clusteringDataSource"
                          transaction-manager="clusteringTransactionManager"/>

    <bean id="jobLauncher" class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
        <property name="jobRepository" ref="jobRepository"/>
        <property name="taskExecutor">
            <bean class="org.springframework.core.task.SimpleAsyncTaskExecutor"/>
        </property>
    </bean>

    <!-- Batch Jobs -->

    <bean id="clusteringTask" class="org.hupo.psi.mi.psicquic.clustering.job.batch.PsicquicClustererTasklet"/>

    <batch:job id="clusteringJob" job-repository="jobRepository" restartable="false">
        <batch:step id="clusteringStep">
            <batch:tasklet ref="clusteringTask" transaction-manager="clusteringTransactionManager"/>
        </batch:step>
    </batch:job>

    <!-- Quartz scheduling -->

    <bean id="clusteringScheduler" class="org.springframework.scheduling.quartz.JobDetailBean">
        <property name="jobClass" value="org.hupo.psi.mi.psicquic.clustering.ClusteringLauncher"/>

        <!-- Note that we cannot use @Autowired in the quartz job as it is instancited by Quartz, so is
             outside the spring context. We use the jobDataAsMap below to inject dependencies instead.
          -->
        <property name="jobDataAsMap">
            <map>
                <entry key="jobRepository" value-ref="jobRepository" />
                <entry key="jobLauncher" value-ref="jobLauncher" />
                <entry key="job" value-ref="clusteringJob" />
                <entry key="clusteringContext" value-ref="clusteringContext" />
            </map>
        </property>
    </bean>

    <bean id="clusteringTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
        <!-- our launcher -->
        <property name="jobDetail" ref="clusteringScheduler"/>
        <!-- 5 seconds -->
        <property name="startDelay" value="2000"/>
        <!-- repeat every 5 seconds -->
        <property name="repeatInterval" value="10000"/>
    </bean>

    <bean id="schedulerFactoryBean" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="triggers">
            <list>
                <ref bean="clusteringTrigger"/>
            </list>
        </property>
    </bean>

    <!--Clustering beans-->

    <bean id="inMemoryDaoFactory" class="org.hupo.psi.mi.psicquic.clustering.job.dao.impl.memory.InMemoryClusteringServiceDaoFactory">
        <qualifier value="inMemory"/>
    </bean>

    <!--<bean id="clusteringContext" name="clusteringContext" class="org.hupo.psi.mi.psicquic.clustering.ClusteringContext" scope="singleton">-->
        <!--<property name="daoFactory" ref="inMemoryDaoFactory" />-->
    <!--</bean>-->

</beans>
